load("@crt//config:compiler.bzl", "artifact_name")
load(
    "//config:features.bzl",
    "CPP_ALL_COMPILE_ACTIONS",
    "C_ALL_COMPILE_ACTIONS",
    "LD_ALL_ACTIONS",
    "feature",
    "feature_set",
    "flag_group",
    "flag_set",
)

package(default_visibility = ["//visibility:public"])

feature(
    name = "architecture",
    enabled = True,
    flag_sets = [
        flag_set(
            actions = C_ALL_COMPILE_ACTIONS + LD_ALL_ACTIONS,
            flag_groups = [
                flag_group(
                    flags = [
                        "[TARGET]",
                    ],
                ),
            ],
        ),
    ],
)

feature(
    name = "includes",
    enabled = True,
    flag_sets = [
        flag_set(
            actions = C_ALL_COMPILE_ACTIONS,
            flag_groups = [
                flag_group(
                    flags = [
                        "[ASM_INCLUDES]",
                        "[SYSTEM_INCLUDES]",
                    ],
                ),
            ],
        ),
    ],
)

feature(
    name = "include_paths",
    enabled = True,
    flag_sets = [
        flag_set(
            actions = C_ALL_COMPILE_ACTIONS,
            flag_groups = [
                flag_group(
                    flags = ["-I%{quote_include_paths}"],
                    iterate_over = "quote_include_paths",
                ),
                flag_group(
                    flags = ["-I%{include_paths}"],
                    iterate_over = "include_paths",
                ),
                flag_group(
                    flags = ["-I%{system_include_paths}"],
                    iterate_over = "system_include_paths",
                ),
            ],
        ),
    ],
)

feature(
    name = "dependency_file",
    enabled = True,
    flag_sets = [
        flag_set(
            actions = C_ALL_COMPILE_ACTIONS,
            flag_groups = [
                flag_group(
                    expand_if_available = "dependency_file",
                    flags = [
                        "--create-full-dep",
                        "%{dependency_file}",
                    ],
                ),
            ],
        ),
    ],
)

feature(
    name = "reproducible",
    enabled = False,
    flag_sets = [
        flag_set(
            actions = C_ALL_COMPILE_ACTIONS,
            flag_groups = [
                flag_group(
                    flags = [
                        "-D__DATE__=\"redacted\"",
                        "-D__TIME__=\"redacted\"",
                    ],
                ),
            ],
        ),
    ],
)

feature(
    name = "dbg",
    enabled = False,
    flag_sets = [
        flag_set(
            actions = C_ALL_COMPILE_ACTIONS,
            flag_groups = [
                flag_group(
                    flags = [
                        "-g",
                    ],
                ),
            ],
        ),
    ],
    provides = ["compilation_mode"],
)

feature(
    name = "fastbuild",
    enabled = False,
    flag_sets = [
        flag_set(
            actions = C_ALL_COMPILE_ACTIONS,
            flag_groups = [
                flag_group(
                    flags = [
                        "-O",
                        "-g",
                    ],
                ),
            ],
        ),
    ],
    provides = ["compilation_mode"],
)

feature(
    name = "opt",
    enabled = False,
    flag_sets = [
        flag_set(
            actions = C_ALL_COMPILE_ACTIONS,
            flag_groups = [
                flag_group(
                    flags = [
                        "-O",
                    ],
                ),
            ],
        ),
    ],
    provides = ["compilation_mode"],
)

feature(
    name = "output_format",
    enabled = False,
)

feature(
    name = "misc",
    enabled = False,
)

feature(
    name = "random_seed",
    enabled = False,
)

feature(
    name = "strip_debug_symbols",
    enabled = False,
)

feature(
    name = "library_search_directories",
    enabled = True,
    flag_sets = [
        flag_set(
            actions = LD_ALL_ACTIONS,
            flag_groups = [
                flag_group(
                    flags = ["[SYSTEM_LIBRARY_PATHS]"],
                ),
                flag_group(
                    expand_if_available = "library_search_directories",
                    flags = ["-L%{library_search_directories}"],
                    iterate_over = "library_search_directories",
                ),
            ],
        ),
    ],
)

feature(
    name = "compiler_input_flags",
    enabled = True,
    flag_sets = [
        flag_set(
            actions = C_ALL_COMPILE_ACTIONS,
            flag_groups = [
                flag_group(
                    expand_if_available = "source_file",
                    flags = [
                        "-c",
                        "%{source_file}",
                    ],
                ),
            ],
        ),
    ],
)

feature(
    name = "compiler_output_flags",
    enabled = True,
    flag_sets = [
        flag_set(
            actions = C_ALL_COMPILE_ACTIONS,
            flag_groups = [
                flag_group(
                    expand_if_available = "output_assembly_file",
                    flags = [
                        "-S",
                    ],
                ),
                flag_group(
                    expand_if_available = "output_preprocess_file",
                    flags = [
                        "-E",
                    ],
                ),
                flag_group(
                    expand_if_available = "output_file",
                    flags = [
                        "-o",
                        "%{output_file}",
                    ],
                ),
            ],
        ),
    ],
)

feature_set(
    name = "cc65",
    feature = [
        ":architecture",
        ":includes",
        ":include_paths",
        ":dependency_file",
        ":library_search_directories",
        ":reproducible",
        ":dbg",
        ":fastbuild",
        ":misc",
        ":opt",
        ":output_format",
        ":random_seed",
        ":strip_debug_symbols",
        ":compiler_output_flags",
        ":compiler_input_flags",
    ],
)

artifact_name(
    name = "nesfile",
    category = "executable",
    extension = ".nes",
)
